import SwiftUI

struct GameView: View {
    var selectedTheme: String
    var selectedDifficulty: Int
    var selectedCardBackground: String
    
    @State private var emojis: [String] = []
    @State private var cardPairs: [Card] = []
    @State private var flippedCards: [Card] = []
    @State private var score = 0               // –°—á–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
    @State private var totalScore = 0           // –û–±—â–∏–π —Å—á–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å—É–º–º–∏—Ä–æ–≤–∞—Ç—å—Å—è
    @State private var isMusicOn = true
    @State private var showingSettings = false
    @State private var showingConfirmation = false
    @State private var gameFinished = false
    @State private var isCardFlipping = false
    @State private var isCardInteractionEnabled = true
    @State private var hintCount = 1 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
    @Environment(\.presentationMode) var presentationMode
    
    var body: some View {
        ZStack {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            BackgroundView(selectedBackground: selectedCardBackground) // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–∞
            
            VStack {
                // –ü–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—Å–µ–≥–¥–∞ —Å–≤–µ—Ä—Ö—É
                HStack {
                    Button(action: {
                        showingSettings = true
                    }) {
                        Image(systemName: "gear")
                            .font(.title)
                            .padding()
                    }
                    Spacer()
                    Button(action: {
                        showingConfirmation = true
                    }) {
                        Text("–í–µ—Ä–Ω—É—Ç—å—Å—è")
                            .font(.title2)
                            .padding()
                    }
                    Spacer()
                    Button(action: {
                        shuffleCards()
                    }) {
                        Image(systemName: "arrow.2.circlepath")
                            .font(.title)
                            .padding()
                    }
                    Spacer()
                    
                    // –ö–Ω–æ–ø–∫–∞ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π (HintView)
                    HintView(cards: $cardPairs, hintCount: $hintCount)
                }
                .background(Color.white.opacity(0.8))
                .shadow(radius: 5)
                .padding(.horizontal)
                .padding(.top, 5)
                
                // –¢–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                VStack(spacing: 10) {
                    Text("–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞: \(selectedTheme)")
                        .font(.largeTitle)
                        .padding(.top, 20)
                    
                    Text("–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: \(score)")       // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
                        .font(.title)
                        .padding(.bottom, 5)
                    
                    Text("–û–±—â–∏–π —Å—á–µ—Ç: \(totalScore)")    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Å—á–µ—Ç
                        .font(.title)
                        .padding(.bottom, 5)
                }
                
                // –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
                LazyVGrid(columns: Array(repeating: GridItem(.flexible()), count: 4)) {
                    ForEach(cardPairs) { card in
                        CardView(card: card) {
                            if isCardInteractionEnabled {
                                onCardTapped(card)
                            }
                        }
                    }
                }
                .padding()
                .onAppear {
                    generateCards()
                    if isMusicOn {
                        SoundPlayerMainGame.playMusic()
                    }
                }
                
                Spacer()
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
                if gameFinished {
                    VStack {
                        Text("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
                            .font(.largeTitle)
                            .padding()
                        
                        HStack {
                            Button("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é") {
                                SoundPlayerMainGame.stopMusic()
                                presentationMode.wrappedValue.dismiss()
                            }
                            .padding()
                            
                            Button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É") {
                                resetGame()
                            }
                            .padding()
                        }
                    }
                    .background(Color.white.opacity(0.9))
                    .cornerRadius(10)
                    .shadow(radius: 10)
                    .padding()
                }
            }
            .navigationTitle("–ò–≥—Ä–∞ –Ω–∞ –ø–∞–º—è—Ç—å")
            .navigationBarHidden(true)
            .sheet(isPresented: $showingSettings) {
                GameSettingsView(isMusicOn: $isMusicOn)
            }
            .alert(isPresented: $showingConfirmation) {
                Alert(
                    title: Text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"),
                    message: Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?"),
                    primaryButton: .destructive(Text("–î–∞")) {
                        SoundPlayerMainGame.stopMusic()
                        presentationMode.wrappedValue.dismiss()
                    },
                    secondaryButton: .cancel()
                )
            }
        }
    }
    
    private func onCardTapped(_ tappedCard: Card) {
        guard !isCardFlipping, flippedCards.count < 2, !tappedCard.isFaceUp, !tappedCard.isTransparent else { return }
        
        var updatedCard = tappedCard
        updatedCard.isFaceUp = true
        
        if let index = cardPairs.firstIndex(where: { $0.id == updatedCard.id }) {
            cardPairs[index] = updatedCard
        }
        
        flippedCards.append(updatedCard)
        
        if flippedCards.count == 2 {
            isCardFlipping = true
            checkForMatch()
        }
    }
    
    private func checkForMatch() {
        let firstCard = flippedCards[0]
        let secondCard = flippedCards[1]
        
        if firstCard.emoji == secondCard.emoji {
            withAnimation {
                //–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                score += 1
                removeMatchedCards(firstCard: firstCard, secondCard: secondCard)
            }
        } else {
            //–û—à–∏–±–∫–∞
            score -= 2  // –í—ã—á–∏—Ç–∞–µ–º 2 –æ—á–∫–∞ –∑–∞ –æ—à–∏–±–∫—É
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                hideUnmatchedCards(firstCard: firstCard, secondCard: secondCard)
            }
        }
        flippedCards.removeAll()
    }
    
    private func removeMatchedCards(firstCard: Card, secondCard: Card) {
        if let index1 = cardPairs.firstIndex(where: { $0.id == firstCard.id }),
           let index2 = cardPairs.firstIndex(where: { $0.id == secondCard.id }) {
            withAnimation {
                // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —ç–∫—Ä–∞–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                cardPairs[index1].offset = CGSize(width: 1000, height: 0)
                cardPairs[index2].offset = CGSize(width: 1000, height: 0)
                
                // –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ª–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
                withAnimation(.easeInOut(duration: 0.5)) {
                    cardPairs[index1].opacity = 0
                    cardPairs[index2].opacity = 0
                }
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) { // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–¥ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º
                    cardPairs[index1].isTransparent = true
                    cardPairs[index2].isTransparent = true
                    cardPairs[index1].offset = .zero
                    cardPairs[index2].offset = .zero
                    isCardFlipping = false
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
                    if cardPairs.allSatisfy({ $0.isTransparent }) {
                        gameFinished = true
                    }
                }
            }
        }
    }
    
    private func hideUnmatchedCards(firstCard: Card, secondCard: Card) {
        if let index1 = cardPairs.firstIndex(where: { $0.id == firstCard.id }),
           let index2 = cardPairs.firstIndex(where: { $0.id == secondCard.id }) {
            withAnimation {
                cardPairs[index1].isFaceUp = false
                cardPairs[index2].isFaceUp = false
                isCardFlipping = false
            }
        }
    }
    
    private func generateCards() {
        switch selectedTheme {
        case "–¢–µ–º–∞ 1":
            emojis = ["üçé", "üçå", "üçá", "üçä", "üçâ", "üçì", "üçà", "üçí", "üçë", "üçç", "ü•≠", "ü•ù"]
        case "–¢–µ–º–∞ 2":
            emojis = ["üê∂", "üê±", "üê∞", "ü¶ä", "üêª", "ü¶Å", "üêÆ", "üê∑", "üê∏", "ü¶ì", "üê¢", "üêò"]
        case "–¢–µ–º–∞ 3":
            emojis = ["üéÉ", "üëª", "üï∑Ô∏è", "üç¨", "üç≠", "üéâ", "üéà", "üéÅ", "üéÄ", "üßô‚Äç‚ôÄÔ∏è", "üßô‚Äç‚ôÇÔ∏è", "üëë"]
        case "–†–∞–Ω–¥–æ–º":
            let allEmojis = ["üçé", "üçå", "üçá", "üçä", "üçâ", "üçì", "üçà", "üçí", "üçë", "üçç", "ü•≠", "ü•ù", "üê∂", "üê±", "üê∞", "ü¶ä", "üêª", "ü¶Å", "üêÆ", "üê∑", "üê∏", "ü¶ì", "üê¢", "üêò", "üéÉ", "üëª", "üï∑Ô∏è", "üç¨", "üç≠", "üéâ", "üéà", "üéÅ", "üéÄ", "üßô‚Äç‚ôÄÔ∏è", "üßô‚Äç‚ôÇÔ∏è", "üëë"]
            emojis = Array(allEmojis.shuffled().prefix(12))
        default:
            emojis = []
        }
        
        let numberOfPairs = selectedDifficulty / 2
        cardPairs = Array(emojis.prefix(numberOfPairs)).flatMap { [$0, $0] }.shuffled().map { Card(emoji: $0, isFaceUp: false) }
    }
    
    private func shuffleCards() {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
        let originalCards = cardPairs
        
        // –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ –≤–∏–¥–∏–º—ã–µ, —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–º–µ—â–∞—Ç—å
        for index in originalCards.indices {
            cardPairs[index].offset = CGSize(width: 0, height: 0)
            cardPairs[index].opacity = 1.0
        }
        
        withAnimation(.spring()) {
            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            cardPairs.shuffle()
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–º–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
            for index in cardPairs.indices {
                cardPairs[index].offset = CGSize(width: 0, height: 0)
            }
        }
    }
    
    
    private func resetGame() {
        totalScore += score  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç –∫ –æ–±—â–µ–º—É –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        score = 0            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã
        hintCount = 1        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫
        isCardInteractionEnabled = true
        flippedCards.removeAll()
        generateCards()
        gameFinished = false
    }
}
